# 버블정렬 : 현재 위치의 값보다 다음 위치의 값이 더 작을 경우 둘의 위치를 바꾸는 것을 반복하여 오름차순으로 정렬되게 함

def bubble_sort(array):                                     # 함수  bubble_sort선언 매개변수 array
    for i in range(len(array)):                             
        for j in range(len(array)-i-1):                     # array원소갯수에서 i빼고 1뺀 수 만큼 반복 ex) [0],[1],[2],[3],[4] 5개라면 -i -1 은 [3]까지만 왜냐면 맨 오른쪽 원소인 맨 끝 원소는 비교할 대상이 없으므로
            if array[j] > array[j+1]:                       # arrry 원소 [j]가 array원소 [j+1] 즉 j 오른쪽에 있는 원소와 비교하여 왼쪽 원소가 더 크면
                array[j], array[j+1] = array[j+1], array[j] # array[j]번째 원소와 [j+1]번째 원소 즉 j의 오른쪽 원소의 순서를 바꾸겠다
    return array                                            # 하는 것을 array의 크기(원소 개수)만큼 반복하여 정렬한 array 반환



# 삽입정렬 : 처리되지 않은 데이터를 하나씩 골라 확인하면서 데이터가 어느 위치에 들어가는게 맞을 것인가를 매번 계산해서 적절한 위치에 들어갈 수 있도록 해줌

def insert_sort(array):                                      # 함수 insert_sort선언 매개변수 array
    for i in range(1, len(array)):                           
        for j in range(i, 0, -1):                            # i부터 1까지 1씩 감소(왼쪽방향으로), 매번 0과 비교하여 왼쪽으로 갈 수 있게 설정(오름차순 정렬로 가정하고 왼쪽데이터와 비교하여 왼쪽 위치로 들어가게 0은 맨 왼쪽으로 갈 수 있게 설정)  만약
            if array[j-1] > array[j]:                        # j번째 원소가 j왼쪽 원소와 비교해서 작다면
                array[j-1], array[j] = array[j], array[j-1]  # j와 j-1의 순서 변경 (비교해서 안 작다면 현재 위치에 멈추고, 오름차순 정렬아닌 아닌 원소가 어디로 삽입될지 다시 판단)
    return array                                             # 하는 것을 인덱스1부터(첫번째 데이터는 그 자체로 정렬이 되어있다고 판단하고 두번째 부터) "array원소개수 - 1" 번 반복하여 정렬한 array 반환



# 선택정렬 : 탐색 범위 내에 처리되지 않은 데이터 중에서 가장 작은 데이터를 골라서 현재 범위에서(정렬이 필요한, 더 정렬이 필요없는 데이터는 더 앞에) 가장 앞에 있는 데이터와 바꾸는 것을 반복 - 매번 선형 탐색을 수행함

def selection_sort(array):                                  # selection_sort함수 선언 매개변수 array
    for i in range(len(array)):                             #  안쪽 반복문 실행을 반복
      min_idx = i                                           # 가장 작은 데이터와 위치가 바뀔 가장 앞쪽 원소의 인덱스를 담음
      for j in range(i+1, len(array)):                      # i+1 (두 번째 원소)부터 차례로 선형탐색 수행 
          if array[min_idx] > array[j]:                     # 만약 가장 작은 데이터와 j를 비교해서 j데이터가 더 작으면
              min_idx = j                                   # 가장 작은데이터는 j가 됨
      array[min_idx], array[j] = array[i], array[min_idx]   # 가장 앞쪽 원소와 가장 작은 원소 위치를 서로 바뀌게 함 (스와프 연산)
    return array                                            # 안쪽 반복문의 수행이 끝났을 때 min_idx에 담기게 되는 것을 i=0 부터 (array갯수-1)번 만큼 반복하여 정렬된 array를 출력
    
    
    
#  병합정렬 재귀함수 사용

def merge_sort(list):
    if len(list) <= 1:                    # 원소가 하나만 남을 때까지
        return list                       # 분할하여 리스트 만듬
    mid = len(list) // 2                  # 이분할했을 때의 중간지점 mid
    leftList = list[:mid]                 # 이분할 했을 때의 mid중심에서 왼쪽 리스트
    rightList = list[mid:]                # 이분할 했을 때의 mid중심에서 오른쪽 리스트
    leftList = merge_sort(leftList)       # 왼쪽리스트 재귀함수 호출하여 다시 이분할하여 왼쪽 리스트 반복 분할
    rightList = merge_sort(rightList)     # 오른쪽리스트 재귀함수 호출하여 다시 이분할하여 오른쪽 리스트 반복 분할
    return merge(leftList, rightList)     # 왼쪽 리스트 오른쪽 리스트 병합하여 반환


# 병합정렬: 조건문 사용 
# 원소가 하나만 남을 때까지 반복적으로 이분할하여 대소 비교 후 정렬하여 다시 재배열한 다음 원래 크기 형태 배열로 병합

def merge(left, right):
    result = []
    while len(left) > 0 or len(right) > 0:      # left에 원소가 하나라도 있거나 right에 원소가 하나라도 있으면 무한 반복
        if len(left) > 0 and len(right) > 0:        # 만약 left에도 원소가 하나라도 있고 right에도 원소가 하나라도 있으면
            if left[0] <= right[0]:                     # 왼쪽 리스트와 오른쪽 리스트의 첫 번째 요소를 비교하여 왼쪽 리스트가 작거나 같으면 왼쪽으로 정렬하여
                result.append(left[0])                      # result에 추가하여 저장하고
                left = left[1:]                             # 해당값 left[0] 지우고 left[1]부터
            else:                                       # 아니면(왼쪽리스트가 크면)
                result.append(right[0])                     # 해당 값을 result에 추가하여 저장하고
                right = right[1:]                           # 지움
        elif len(left) > 0:                         # 만약 left에 원소가 한개라도 있으면 
            result.append(left[0])                      # 첫번째 원소를 result에 추가하여 저장하고
            left = left[1:]                             # 삭제
        elif len(right) > 0:                        # 만약 right에 원소가 한개라도 있으면 
            result.append(right[0])                     # 첫번째 원소를 result에 추가하여 저장하고
            right = right[1:]                           # 삭제
    return result                                # result리스트 반환
    
    
    
### 파이썬의 정렬

# sort(), sort(reverse=False):오름차순 정렬
# 기존 리스트를 변경

li1 = [7,2,9,3,1]
li1.sort()
print(li1)
# [1, 2, 3, 7, 9]


# sort(reverse=True): 내림차순 정렬

li1.sort(reverse=True)
print(li1)

li2 = ['c', 'd', 'a', 'b'] # a가 가장 작고 z가 가장 큼
li2.sort()
print(li2)
# [9, 7, 3, 2, 1]
# ['a', 'b', 'c', 'd']


# reverse() : 자기 자신을 내림차순이 아닌 그냥 원래 순서에서 역순으로 반환

li = [9,3,0,7,2,9]
li.reverse()
print(li)
# [5, 4, 3, 2, 1]
# [1, 2, 3, 4, 5]



# 기존리스트는 그대로 두고 새 리스트 반환
# reversed(): 큰 값부터 내림차순 정렬

li5 = [1,2,3,4,5]
li6 = reversed(li5)      # reversed를 하면 리스트가 객체가 됨
print(li5)
print(li6)               # 출력하면 가끔 object가 뜨므로
print(list(li6))         # list로 변경해주는게 좋다
# [1, 2, 3, 4, 5]
# <list_reverseiterator object at 0x7f94472268e0>
# [5, 4, 3, 2, 1]




    
