https://www.notion.so/4-e6a18a6fb45c42b6b18b671d8dadf13a

# 버블정렬 
def bubble_sort(array):
    for i in range(len(array)):
        for j in range(len(array)-i-1):
            if array[j] > array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
    return array
    
    '''
    예시 : [1, 2, 3, 6, 5, 4]

for i in range(6)

for j in range(5) 

1. [1, 2, 3, 6, 5, 4]   :  5번(len(array)-i-1)
2. [    2, 3, 5, 4, 6]   :  4번(6-1-1)
3. [        3, 4, 5, 6]   :  3번(6-2-1)
4. [            4, 5, 6]  :   2번(6-3-1)
5. [                5, 6]  :   1번(6-4-1)
6. [                    6]  :   0번(6-5-1)
총 6번( i ) 하며 5,4,3,2,1,0번( j ) 바꿨음.
'''


#삽입정렬
def insert_sort(array):
    for i in range(1, len(array)):
        for j in range(i, 0, -1):
            if array[j-1] > array[j]:
                array[j-1], array[j] = array[j], array[j-1]
    return array
 '''
예시 : [1, 2, 3, 6, 5, 4]

for i in range(1,6) : 1,2,3,4,5

for j in range(i, 0, -1)

                                      i=1 : j=1

                                      i=2 : j=2, j=1

                                      i=3 : j=3, j=2, j=1

                                      i=4 : j=4, j=3, j=2, j=1

                                      i=5 : j=5, j=4, j=3, j=2, j=1
'''

#선택정렬
def selection_sort(array):
    for i in range(len(array)):
        min_idx = i
        for j in range(i+1, len(array)):
            if array[min_idx] > array[j]:
                min_idx = j
        array[min_idx], array[i] = array[i], array[min_idx]
    return array
    
 '''
    예시 : [1, 2, 3, 6, 5, 4]

for 0 in range(6):
min_idx = 0
for j in range(0+1, 6):
if  array[0] > array[1]:           j=1부터
1 > 2: (X)
if array[0] > array[2]:
if array[0] > array[3]:
if array[0] > array[4]:
만약에 array[5]가 더작다면
if array[0] > array[5]:
j = min_idx
array[min_idx] , array[i] = array[i], array[min_idx]  

0,1,2,3,4 즉 가장 작은 자리랑 바꿔주어라

for 1 in range(6):

min_idx =1 

for j in range(1+1, 6):
if array[1] > array[2]
if array[1] > array[3]
if array[1] > array[4]
if array[1] > array[5]
'''

# 병합정렬
def merge_sort(list):
    if len(list) <= 1:
        return list
    mid = len(list) // 2
    leftList = list[:mid]
    rightList = list[mid:]
    leftList = merge_sort(leftList)
    rightList = merge_sort(rightList)
    return merge(leftList, rightList)
#   return (leftList, rightList)
# print(merge_sort([6, 5, 1, 4, 3, 2, 8, 7]))
# ((([6], [5]), ([1], [4])), (([3], [2]), ([8], [7])))

def merge(left, right):
    result = []
    while len(left) > 0 or len(right) > 0:
        if len(left) > 0 and len(right) > 0:
            if left[0] <= right[0]:
                result.append(left[0])
                left = left[1:]
            else:
                result.append(right[0])
                right = right[1:]
        elif len(left) > 0:
            result.append(left[0])
            left = left[1:]
        elif len(right) > 0:
            result.append(right[0])
            right = right[1:]
    return result
# [1, 2, 3, 4, 5, 6, 7, 8]

    
